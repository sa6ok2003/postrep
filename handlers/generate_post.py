from aiogram import types
from misc import dp, bot
from .another_sqlit import return_chatid_channel
from .option_button import optioon_but, optioon_duble_button

import sqlite3
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from .text_mes import text_but, text_but2,text_but3

import asyncio


class gener_post(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()
    step4 = State()
    step5 = State()
    gener_text = State()
    add_media = State()
    add_button = State()


markup = types.InlineKeyboardMarkup()
bat1 = types.InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data="send_post")
bat2 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data="start_new")
markup.add(bat1)
markup.add(bat2)

markup2 = types.InlineKeyboardMarkup()
bat1 = types.InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data="send_post")
bat2 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data="start_new")
bat3 = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data="create_dable")
markup2.add(bat1)
markup2.add(bat2)
markup2.add(bat3)


markup3 = types.InlineKeyboardMarkup()
bat1 = types.InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data="send_post")
bat2 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', callback_data="start_new")
bat3 = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data="create_reak")
markup3.add(bat1)
markup3.add(bat2)
markup3.add(bat3)


@dp.callback_query_handler(text='cansel', state=gener_post.step1)
async def otmena_vsego(call: types.callback_query,state: FSMContext):
    await state.finish()
    try:
        await bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

    except: pass

async def get_post(user_channel, message, state: FSMContext):
    await gener_post.step1.set()
    id_channel = return_chatid_channel(user_channel)  # ID –ö–∞–Ω–∞–ª–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç
    await state.update_data(idchannel=id_channel)
    await state.update_data(a=0)
    markup3 = types.InlineKeyboardMarkup()
    bat1 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="cansel")
    markup3.add(bat1)
    go_text = await bot.send_message(message.chat.id, text=f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª <b>@{user_channel}</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n
<b>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏–∞—Ñ–∞–π–ª</b>, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–º –ø–æ—Å—Ç–µ""", parse_mode='html',reply_markup=markup3)
    await state.update_data(go_text=go_text.message_id)

    await state.update_data(user_channel777=user_channel,message777 = message, state777=state)


@dp.callback_query_handler(text='start_new', state="*")
async def start_new(call: types.callback_query,state: FSMContext):
    data = await state.get_data()
    mes1 = data['start_new1']
    mes2 = data['start_new2']
    await bot.delete_message(chat_id=call.message.chat.id,message_id=mes1.message_id)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=mes2.message_id)

    user_channel777 = data['user_channel777']
    message777 = data['message777']

    await get_post(user_channel=user_channel777,message=message777,state=state)






########## –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê –í –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='send_post', state='*')
async def send_post(call: types.callback_query, state: FSMContext):
    await bot.send_message(chat_id=call.message.chat.id,text='<b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n'
                                                             '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π - /post',parse_mode='html')

    data = await state.get_data()
    id_channel = data['idchannel']
    send_message = data['mes']
    try:
        a = data['markup']  # C—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    except: a=types.InlineKeyboardMarkup()
    id_messad = (await bot.copy_message(chat_id=id_channel, message_id=send_message.message_id, from_chat_id=call.message.chat.id,reply_markup=a)).message_id
    try:
        text_ok = data['text_ok']
        text_bad = data['text_bad']
        id_channel = id_channel
        id_user = call.message.chat.id

        db = sqlite3.connect('server.db')
        sql = db.cursor()
        sql.execute(""" CREATE TABLE IF NOT EXISTS user_bat(
               id_messad,
               text_ok,
               text_bad,
               id_channel,
               id_user
               ) """)
        db.commit()

        sql.execute(f"INSERT INTO user_bat VALUES (?,?,?,?,?)", (id_messad,text_ok,text_bad,id_channel,id_user))
        db.commit()
    except: pass
    id_del1 = data['start_new2']
    id_del2 = data['start_new1']

    try:
        await bot.delete_message(chat_id=call.message.chat.id,message_id=id_del1.message_id)
    except:
        pass
    try:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=id_del2.message_id)
    except: pass
    await state.finish()

############


@dp.message_handler(state=gener_post.step1, content_types=['photo', 'video'])
async def name_channel(message: types.Message, state: FSMContext):
    # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    go_photo = await bot.copy_message(chat_id=message.chat.id, message_id=message.message_id,
                                      from_chat_id=message.chat.id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç–∞
    del_mes = await bot.send_message(chat_id=message.chat.id,
                                     text=f"üëÜ–°–µ–π—á–∞—Å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫\n\n–¢–µ–ø–µ—Ä—å <b>–æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–≤–æ–µ–º—É –ø–æ—Å—Ç—É\n\n"
                                          f"<i>–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É html</i>",
                                     reply_markup=markup, parse_mode='html')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∞
    await state.update_data(go_photo=go_photo)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª
    await state.update_data(mes=go_photo)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª
    await state.update_data(del_mes=del_mes)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
    await state.update_data(start_new1=del_mes)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
    await state.update_data(start_new2=go_photo)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ

    # –ß–∏—Ç—Å–∫–∞
    a = (await state.get_data())['go_text']  # –ß–∏—Ç–∫–∞
    data = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)  # –ß–∏—Å—Ç–∫–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=a)  # –ß–∏—Å—Ç–∫–∞

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await gener_post.step2.set()


@dp.message_handler(state=gener_post.step2, content_types='text')
async def name_step2(message: types.Message, state: FSMContext):
    # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    a = (await state.get_data())['go_photo']  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    go_photo2 = await bot.copy_message(chat_id=message.chat.id, message_id=a.message_id, from_chat_id=message.chat.id,caption=message.text,parse_mode='html')
    await state.update_data(mes=go_photo2)
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç–∞
    del_mes2 = await bot.send_message(chat_id=message.chat.id, text=text_but, reply_markup=markup2,parse_mode='html')  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ç–æ, –∫–∞–∫ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∞
    await state.update_data(start_new1=go_photo2)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
    await state.update_data(start_new2=del_mes2)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ

    await state.update_data(go_photo2=go_photo2)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    await state.update_data(del_mes2=del_mes2)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
    await state.update_data(key=0)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ

    # –ß–∏—Ç—Å–∫–∞
    a = (await state.get_data())['del_mes']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=a.message_id)
    b = (await state.get_data())['go_photo']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=b.message_id)
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id)  # –ß–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await gener_post.step3.set()


@dp.message_handler(content_types='text', state=gener_post.step3)
async def add_button(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.chat.id, message_id=call.message_id)
    try:
        if ((await state.get_data())['key']) == 0:  # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É:
            a = optioon_but(call.text)
            mes_photo = ((await state.get_data())['go_photo2'])  # C—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ

            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = types.InlineKeyboardMarkup()

            if len(a) == 1:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                markup.add(bat1)

            elif len(a) == 2:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                bat2 = types.InlineKeyboardButton(text=a[1]['name'], url=a[1]['url'])
                markup.add(bat1, bat2)

            elif len(a) == 3:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                bat2 = types.InlineKeyboardButton(text=a[1]['name'], url=a[1]['url'])
                bat3 = types.InlineKeyboardButton(text=a[2]['name'], url=a[2]['url'])
                markup.add(bat1, bat2, bat3)

            else:
                await bot.send_message(chat_id=call.chat.id, text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫')
            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

            mes = await bot.copy_message(chat_id=call.chat.id, from_chat_id=call.chat.id,
                                         message_id=mes_photo.message_id, reply_markup=markup)
            mes1 = await bot.send_message(chat_id=call.chat.id, text='–°–µ–π—á–∞—Å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫\n\n'
                                                                     '–ñ–º–∏ <b>–î–ê–õ–ï–ï</b>, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ URL –ö–Ω–æ–ø–æ–∫\n\n'
                                                                     '–¢—ã <b>–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å</b> –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫',
                                          reply_markup=markup2, parse_mode='html')

            await state.update_data(start_new1=mes)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
            await state.update_data(start_new2=mes1)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
            await state.update_data(markup=markup)
            await state.update_data(mes=mes)
            await bot.delete_message(chat_id=call.chat.id, message_id=mes_photo.message_id)

            try:
                a = (await state.get_data())['del_mes2']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–∞
                await bot.delete_message(chat_id=call.chat.id, message_id=a.message_id)
                b = (await state.get_data())['go_photo2']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                await bot.delete_message(chat_id=call.chat.id, message_id=b.message_id)

            except:
                pass  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
            await state.update_data(key=1)

        else:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ç–æ—Ä–æ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
            markup = ((await state.get_data())['markup'])  # C—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            a = optioon_but(call.text)

            if len(a) == 1:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                markup.add(bat1)

            elif len(a) == 2:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                bat2 = types.InlineKeyboardButton(text=a[1]['name'], url=a[1]['url'])
                markup.add(bat1, bat2)

            elif len(a) == 3:
                bat1 = types.InlineKeyboardButton(text=a[0]['name'], url=a[0]['url'])
                bat2 = types.InlineKeyboardButton(text=a[1]['name'], url=a[1]['url'])
                bat3 = types.InlineKeyboardButton(text=a[2]['name'], url=a[2]['url'])
                markup.add(bat1, bat2, bat3)

            await state.update_data(markup=markup)
            a = (await state.get_data())['mes']
            b = await bot.edit_message_reply_markup(chat_id=call.chat.id, message_id=a.message_id, reply_markup=markup)
            await state.update_data(start_new1=b)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ
            await state.update_data(mes=b)

            try:
                # –ß–∏—Å—Ç–∫–∞
                a = (await state.get_data())['del_mes2']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–∞
                await bot.delete_message(chat_id=call.chat.id, message_id=a.message_id)
                b = (await state.get_data())['go_photo2']  # –ß–∏—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                await bot.delete_message(chat_id=call.chat.id, message_id=b.message_id)
            except:
                pass



    except:
        await bot.send_message(call.chat.id, text='–í–≤–æ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ!')


@dp.callback_query_handler(text='create_dable', state='*')
async def create_dable_but(call: types.callback_query, state: FSMContext):
    await bot.edit_message_text(chat_id=call.message.chat.id, text=text_but2, message_id=call.message.message_id,parse_mode='html',reply_markup=markup3)
    await gener_post.step4.set()


@dp.message_handler(content_types='text', state=gener_post.step4)
async def add_button2(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.chat.id, message_id=call.message_id)
    d = optioon_duble_button(call.text)
    if len(d) != 3:
        await bot.send_message(chat_id=call.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    else:
        try:
            a = (await state.get_data())['markup']  # C—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        except:
            a = types.InlineKeyboardMarkup()
        mes = (await state.get_data())['mes']  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ—Å—Ç–æ–º

        data = await state.get_data()
        id_channel = data['idchannel']

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ##### –û–©–ò–ë–ö–ê –í –¢–û–ú –ß–¢–û –í –ö–ê–õ–õ–ë–ï–ö –î–ê–¢–ï –ù–ï–õ–¨–ó–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
        bat1 = types.InlineKeyboardButton(text=d[0], callback_data=f'tap_dable+{id_channel}')
        a.add(bat1)


        await state.update_data(markup=a)

        await state.update_data(text_bad=d[1])
        await state.update_data(text_ok=d[2])



        await bot.edit_message_reply_markup(chat_id=call.chat.id,message_id=mes.message_id,reply_markup=a)


        await state.update_data(start_new1=mes)  # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ —Å–µ—Ç –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å–º–æ—Ç—Ä–µ


@dp.callback_query_handler(text='create_reak', state='*')
async def create_reak_but(call: types.callback_query, state: FSMContext):
    data = await state.get_data()
    mes1 = data['start_new2']
    await bot.edit_message_text(chat_id=call.message.chat.id,message_id=mes1.message_id,text=text_but3,parse_mode='html',reply_markup=markup)
    await gener_post.step5.set()


@dp.message_handler(content_types='text', state=gener_post.step5)
async def add_button3(message: types.Message, state: FSMContext):
    print(message)
    text = message.text
    arr = text.split('-')
    if len(arr) == 2 or len(arr) == 1:
        dannie = arr
        k = -1
        for i in arr:
            k += 1
            if i[0] == ' ':
                if i[-1] == ' ':
                    dannie[k] = (i[1:-1])
                else:
                    dannie[k] = (i[1:])

            else:
                if i[-1] == ' ':
                    dannie[k] = (i[:-1])
                else:
                    pass
        if len(dannie) == 2:
            if (len(dannie[0]) != 1 or len(dannie[1]) != 1):
                await bot.send_message(chat_id=message.chat.id, text='<b>–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–≤–∞ —Å–º–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>.'
                                                                     'üëç - üëé', parse_mode='html')
            else:
                try:
                    a = (await state.get_data())['markup']  # C—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                except:
                    a = types.InlineKeyboardMarkup()

                batq1 = types.InlineKeyboardButton(text=f'{dannie[0]}0',
                                                   callback_data=f'reakch{dannie[0]}')  # –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£
                batq2 = types.InlineKeyboardButton(text=f'{dannie[1]}0',
                                                   callback_data=f'reakch{dannie[1]}')  # –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£
                a.add(batq1, batq2)
                await state.update_data(markup=a)
                mes = (await state.get_data())['mes']  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ—Å—Ç–æ–º
                await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=mes.message_id, reply_markup=a)
        else:
            if len(dannie[0]) != 1:
                await bot.send_message(chat_id=message.chat.id,
                                       text='<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–Ω —Å–º–∞–π–ª –∏–ª–∏ –¥–≤–∞ —Å–º–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>'
                                            'üëç - üëé', parse_mode='html')
            else:
                try:
                    a = (await state.get_data())['markup']  # C—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                except:
                    a = types.InlineKeyboardMarkup()

                batq1 = types.InlineKeyboardButton(text=f'{dannie[0]}0',
                                                   callback_data=f'reakch{dannie[0]}')  # –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£
                a.add(batq1)
                await state.update_data(markup=a)
                mes = (await state.get_data())['mes']  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç–µ—Å—Ç–æ–º
                await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=mes.message_id, reply_markup=a)




    else:
        await bot.send_message(chat_id=message.chat.id, text="<b>–í–≤–æ–¥–∏ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                                                             "üëç - üëé", parse_mode='html')


@dp.callback_query_handler(text_startswith= 'reakch', state='*')
async def dfldsfk (call : types.callback_query, state: FSMContext):
    try:
        q =(call.data[6:])
        a = (call.message.reply_markup['inline_keyboard'])
        ks = -1
        n=0
        k = -1 # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ—á–∫–∏ –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞
        for i in a:# –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ—á–∫–∏ –∫–ª–∞–≤—ã
            if len(i) == 2:
                n+=1
            k+=1
            for ii in i: #–ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ—á–∫–µ
                ks+=1
                if q in ii['text'] and (ii['text'][1] in '0123456789'):
                    if q in i[0]['text']:
                        text = call.message.reply_markup['inline_keyboard'][int(k)][int(0)]['text']
                        text1 = text[0]
                        text2 = int(text[1:])
                        call.message.reply_markup['inline_keyboard'][int(k)][int(0)]['text'] = f'{text1}{text2+1}'
                        new_markup = call.message.reply_markup
                        await bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,reply_markup=new_markup)
                        break
                    elif q in i[1]['text']:
                        text = call.message.reply_markup['inline_keyboard'][int(k)][int(1)]['text']
                        text1 = text[0]
                        text2 = int(text[1:])
                        call.message.reply_markup['inline_keyboard'][int(k)][int(1)]['text'] = f'{text1}{text2 + 1}'
                        new_markup = call.message.reply_markup
                        await bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                            message_id=call.message.message_id, reply_markup=new_markup)
                        break


    except:pass
